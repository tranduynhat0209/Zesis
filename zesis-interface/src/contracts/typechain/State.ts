/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface StateInterface extends utils.Interface {
  functions: {
    "getState(uint256)": FunctionFragment;
    "getStateDataByBlock(uint256,uint64)": FunctionFragment;
    "getStateDataById(uint256)": FunctionFragment;
    "getStateDataByTime(uint256,uint64)": FunctionFragment;
    "getTransitionInfo(uint256)": FunctionFragment;
    "identities(uint256,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transitState(uint256,uint256,uint256,bool,uint256[2],uint256[2][2],uint256[2])": FunctionFragment;
    "transitions(uint256)": FunctionFragment;
    "verifier()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getState"
      | "getStateDataByBlock"
      | "getStateDataById"
      | "getStateDataByTime"
      | "getTransitionInfo"
      | "identities"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setVerifier"
      | "transferOwnership"
      | "transitState"
      | "transitions"
      | "verifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateDataByBlock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateDataById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStateDataByTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransitionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "identities",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setVerifier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transitState",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      [BigNumberish, BigNumberish],
      [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transitions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStateDataByBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateDataById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStateDataByTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransitionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "identities", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transitions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StateUpdated(uint256,uint64,uint64,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateUpdated"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StateUpdatedEventObject {
  id: BigNumber;
  blockN: BigNumber;
  timestamp: BigNumber;
  state: BigNumber;
}
export type StateUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  StateUpdatedEventObject
>;

export type StateUpdatedEventFilter = TypedEventFilter<StateUpdatedEvent>;

export interface State extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getState(id: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    getStateDataByBlock(
      id: BigNumberish,
      blockN: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getStateDataById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getStateDataByTime(
      id: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTransitionInfo(
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    identities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        BlockN: BigNumber;
        BlockTimeStamp: BigNumber;
        State: BigNumber;
      }
    >;

    initialize(
      _verifierContractAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setVerifier(
      newVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        replaceAtTimestamp: BigNumber;
        createAtTimestamp: BigNumber;
        replacedAtBlock: BigNumber;
        createdAtBlock: BigNumber;
        id: BigNumber;
        replaceBy: BigNumber;
      }
    >;

    verifier(overrides?: CallOverrides): Promise<[string]>;
  };

  getState(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  getStateDataByBlock(
    id: BigNumberish,
    blockN: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getStateDataById(
    id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getStateDataByTime(
    id: BigNumberish,
    timestamp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getTransitionInfo(
    state: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  identities(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      BlockN: BigNumber;
      BlockTimeStamp: BigNumber;
      State: BigNumber;
    }
  >;

  initialize(
    _verifierContractAddr: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setVerifier(
    newVerifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transitState(
    id: BigNumberish,
    oldState: BigNumberish,
    newState: BigNumberish,
    isOldStateGenesis: boolean,
    a: [BigNumberish, BigNumberish],
    b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
    c: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transitions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      replaceAtTimestamp: BigNumber;
      createAtTimestamp: BigNumber;
      replacedAtBlock: BigNumber;
      createdAtBlock: BigNumber;
      id: BigNumber;
      replaceBy: BigNumber;
    }
  >;

  verifier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getState(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStateDataByBlock(
      id: BigNumberish,
      blockN: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getStateDataById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getStateDataByTime(
      id: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getTransitionInfo(
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    identities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        BlockN: BigNumber;
        BlockTimeStamp: BigNumber;
        State: BigNumber;
      }
    >;

    initialize(
      _verifierContractAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setVerifier(newVerifier: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    transitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        replaceAtTimestamp: BigNumber;
        createAtTimestamp: BigNumber;
        replacedAtBlock: BigNumber;
        createdAtBlock: BigNumber;
        id: BigNumber;
        replaceBy: BigNumber;
      }
    >;

    verifier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "StateUpdated(uint256,uint64,uint64,uint256)"(
      id?: null,
      blockN?: null,
      timestamp?: null,
      state?: null
    ): StateUpdatedEventFilter;
    StateUpdated(
      id?: null,
      blockN?: null,
      timestamp?: null,
      state?: null
    ): StateUpdatedEventFilter;
  };

  estimateGas: {
    getState(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getStateDataByBlock(
      id: BigNumberish,
      blockN: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateDataById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStateDataByTime(
      id: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransitionInfo(
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    identities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _verifierContractAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setVerifier(
      newVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getState(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateDataByBlock(
      id: BigNumberish,
      blockN: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateDataById(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStateDataByTime(
      id: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransitionInfo(
      state: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    identities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _verifierContractAddr: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      newVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transitState(
      id: BigNumberish,
      oldState: BigNumberish,
      newState: BigNumberish,
      isOldStateGenesis: boolean,
      a: [BigNumberish, BigNumberish],
      b: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]],
      c: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transitions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
