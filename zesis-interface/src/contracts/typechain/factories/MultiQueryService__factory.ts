/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MultiQueryService,
  MultiQueryServiceInterface,
} from "../MultiQueryService";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_mtpValidator",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "mtpValidator",
    outputs: [
      {
        internalType: "contract IValidator",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "queries",
    outputs: [
      {
        internalType: "uint256",
        name: "deterministicValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "mask",
        type: "uint256",
      },
      {
        internalType: "uint128",
        name: "claimSchema",
        type: "uint128",
      },
      {
        internalType: "uint64",
        name: "timestamp",
        type: "uint64",
      },
      {
        internalType: "uint8",
        name: "slotIndex",
        type: "uint8",
      },
      {
        internalType: "uint8",
        name: "operator",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "deterministicValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "mask",
            type: "uint256",
          },
          {
            internalType: "uint128",
            name: "claimSchema",
            type: "uint128",
          },
          {
            internalType: "uint64",
            name: "timestamp",
            type: "uint64",
          },
          {
            internalType: "uint8",
            name: "slotIndex",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "operator",
            type: "uint8",
          },
        ],
        internalType: "struct IValidator.Query[]",
        name: "newQueries",
        type: "tuple[]",
      },
    ],
    name: "setQueries",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "verified",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "in_proof",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "proof_inputs",
        type: "uint256[]",
      },
    ],
    name: "verify",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d1b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638da5cb5b11610076578063b864f5a91161005b578063b864f5a91461019d578063c4d66de8146101b0578063f2fde38b146101c357600080fd5b80638da5cb5b14610128578063ab9c67ad1461013957600080fd5b80631a9425c1146100a8578063625866a7146100e05780636a1c4be1146100f5578063715018a614610120575b600080fd5b6100cb6100b6366004610ae3565b60676020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100f36100ee36600461093a565b6101d6565b005b606554610108906001600160a01b031681565b6040516001600160a01b0390911681526020016100d7565b6100f361032f565b6033546001600160a01b0316610108565b61014c610147366004610ae3565b610343565b6040805196875260208701959095526fffffffffffffffffffffffffffffffff9093169385019390935267ffffffffffffffff16606084015260ff91821660808401521660a082015260c0016100d7565b6100f36101ab366004610a5d565b6103bd565b6100f36101be36600461090a565b6104a5565b6100f36101d136600461090a565b6105f2565b6101de610682565b6101ea6066600061081d565b60005b815181101561032b57606682828151811061020a5761020a610cb9565b602090810291909101810151825460018082018555600094855293839020825160039092020190815591810151928201929092556040820151600290910180546060840151608085015160a0909501516fffffffffffffffffffffffffffffffff9094167fffffffffffffffff0000000000000000000000000000000000000000000000009092169190911770010000000000000000000000000000000067ffffffffffffffff90921691909102177fffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffff16600160c01b60ff948516027fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff1617600160c81b93909216929092021790558061032381610c90565b9150506101ed565b5050565b610337610682565b61034160006106dc565b565b6066818154811061035357600080fd5b60009182526020909120600390910201805460018201546002909201549092506fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204169060ff600160c01b8204811691600160c81b90041686565b6000816000815181106103d2576103d2610cb9565b6020908102919091010151606554606680546040517f58af69390000000000000000000000000000000000000000000000000000000081529394506001600160a01b03909216926358af69399261043192889288929190600401610b37565b60206040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104819190610ac1565b156104a0576000818152606760205260409020805460ff191660011790555b505050565b600054610100900460ff16158080156104c55750600054600160ff909116105b806104df5750303b1580156104df575060005460ff166001145b6105565760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b6000805460ff191660011790558015610579576000805461ff0019166101001790555b6065805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790556105a961073b565b801561032b576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6105fa610682565b6001600160a01b0381166106765760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161054d565b61067f816106dc565b50565b6033546001600160a01b031633146103415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161054d565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166107a65760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161054d565b610341600054610100900460ff166108145760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161054d565b610341336106dc565b508054600082556003029060005260206000209081019061067f91905b8082111561087e57600080825560018201556002810180547fffffffffffff000000000000000000000000000000000000000000000000000016905560030161083a565b5090565b600082601f83011261089357600080fd5b813560206108a86108a383610c6c565b610c3b565b80838252828201915082860187848660051b89010111156108c857600080fd5b60005b858110156108e7578135845292840192908401906001016108cb565b5090979650505050505050565b803560ff8116811461090557600080fd5b919050565b60006020828403121561091c57600080fd5b81356001600160a01b038116811461093357600080fd5b9392505050565b6000602080838503121561094d57600080fd5b823567ffffffffffffffff8082111561096557600080fd5b818501915085601f83011261097957600080fd5b81356109876108a382610c6c565b8181528481019084860160c0808502870188018b10156109a657600080fd5b600096505b84871015610a4e5780828c0312156109c257600080fd5b6109ca610c12565b8235815288830135898201526040808401356fffffffffffffffffffffffffffffffff811681146109fa57600080fd5b908201526060838101358881168114610a1257600080fd5b908201526080610a238482016108f4565b9082015260a0610a348482016108f4565b9082015284526001969096019592870192908101906109ab565b50909998505050505050505050565b60008060408385031215610a7057600080fd5b823567ffffffffffffffff80821115610a8857600080fd5b610a9486838701610882565b93506020850135915080821115610aaa57600080fd5b50610ab785828601610882565b9150509250929050565b600060208284031215610ad357600080fd5b8151801515811461093357600080fd5b600060208284031215610af557600080fd5b5035919050565b600081518084526020808501945080840160005b83811015610b2c57815187529582019590820190600101610b10565b509495945050505050565b60006080808352610b4a81840188610afc565b602084820381860152610b5d8289610afc565b91506040878187015260608684038188015283885480865284860191508960005284600020955060005b81811015610c00578654835260018701548684015260028701546fffffffffffffffffffffffffffffffff81168685015267ffffffffffffffff818a1c168585015260ff60c082811c82168b870152610bea60a08701838560c81c1660ff169052565b6003999099019894909401935050600101610b87565b50909c9b505050505050505050505050565b60405160c0810167ffffffffffffffff81118282101715610c3557610c35610ccf565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610c6457610c64610ccf565b604052919050565b600067ffffffffffffffff821115610c8657610c86610ccf565b5060051b60200190565b6000600019821415610cb257634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203f0cdc1b7d13dc5c6f6761161dd1fdd64e509b614aadac194f2d907516750ad064736f6c63430008070033";

type MultiQueryServiceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiQueryServiceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiQueryService__factory extends ContractFactory {
  constructor(...args: MultiQueryServiceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MultiQueryService> {
    return super.deploy(overrides || {}) as Promise<MultiQueryService>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiQueryService {
    return super.attach(address) as MultiQueryService;
  }
  override connect(signer: Signer): MultiQueryService__factory {
    return super.connect(signer) as MultiQueryService__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiQueryServiceInterface {
    return new utils.Interface(_abi) as MultiQueryServiceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiQueryService {
    return new Contract(address, _abi, signerOrProvider) as MultiQueryService;
  }
}
