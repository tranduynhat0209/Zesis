{
  "openapi": "3.0.3",
  "info": {
    "title": "Issuer server",
    "description": "*List APIs for Issuer Portal* \n ## Introduction \n This API is documented for **Issuer Server**. \n ## Authentication \n **Issuer server** use **Jwz Token** for authentication.",
    "version": "1.0"
  },
  "tags": [
    {
      "name": "issuers",
      "description": "*List APIs to manager your Issuers.*"
    },
    {
      "name": "claims",
      "description": "*List APIs for Claims.*"
    },
    {
      "name": "schemas",
      "description": "*List APIs to manager Schemas.*"
    },
    {
      "name": "registries",
      "description": "*List APIs to manager Registry Services.*"
    }  
  ],
  "paths": {
    "/api/v1/issuers": {
      "get": {
        "operationId": "issuers-1",
        "security": [
        ],
        "tags": [
          "issuers"
        ],
        "summary": "Get all issuers infor",
        "description": "API to get all issuers is registed in this server.",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Information of all Issuers",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "issuerId": {
                        "type": "string",
                        "description": "DID of Issuers.",
                        "example": "123456"
                      },
                      "numPublishClaims": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number Claims that Issuer published.",
                        "example": 10
                      },
                      "numHolders": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Number Holders in this Issuer Servers.",
                        "example": 10
                      },
                      "name": {
                        "type": "string",
                        "description": "issuer name",
                        "example": "issuer 1"
                      },
                      "description": {
                        "type": "string",
                        "description": "description about issuer",
                        "example": "description"
                      },
                      "logoUrl": {
                        "type": "string",
                        "description": "logo url",
                        "example": "examp.logo.url"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/issuers/{issuerId}/profile": {
      "get": {
        "operationId": "issuers-9",
        "security": [
          {
            "Authorization": ["read", "write"]
          }
        ],
        "tags": [
          "issuers"
        ],
        "summary": "Get Issuer information",
        "description": "Get information of a Issuer",
        "parameters": [
          {
            "name": "issuerId",
            "in": "path",
            "description": "DID of issuer",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Issuer information",
                  "type": "object",
                  "properties": {
                    "issuerId": {
                      "type": "string",
                      "description": "DID of Issuers.",
                      "example": "123456"
                    },
                    "numPublishClaims": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Number Claims that Issuer published.",
                      "example": 10
                    },
                    "numHolders": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Number Holders in this Issuer Servers.",
                      "example": 10
                    },
                    "name": {
                      "type": "string",
                      "description": "issuer name",
                      "example": "issuer 1"
                    },
                    "description": {
                      "type": "string",
                      "description": "description about issuer",
                      "example": "description"
                   },
                    "logoUrl": {
                      "type": "string",
                      "description": "logo url",
                      "example": "examp.logo.url"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims": {
      "get": {
        "operationId": "claims-1",
        "security": [],
        "tags": [
          "claims"
        ],
        "summary": "Query claims",
        "description": "Search claims by issuerId, status, holderId, schemaHash or claimId",
        "parameters": [
          {
            "name": "issuerId",
            "in": "query",
            "description": "DID of Issuer",
            "schema": {
              "type": "string",
              "example": "1234"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "search by PENDING | ACTIVE | REVIEWING | REJECT | PENDING_REVOKE | REVOKED",
            "schema": {
              "type": "array", 
              "items": {
                "type": "string",
                "description": "search by PENDING | ACTIVE | REVIEWING | REJECT | PENDING_REVOKE | REVOKED"
              }
            }
          },
          {
            "name": "holderId",
            "in": "query",
            "description": "DID of Holder",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaHash",
            "in": "query",
            "description": "search by schemaHash",
            "schema": {
              "type": "string",
              "example": "12345"
            }
          },
          {
            "name": "claimId",
            "in": "query",
            "description": "Find claim by List claimIds",
            "schema": {
              "type": "array", 
              "items": {
                "type": "string",
                "description": "search by ClaimIds"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Claim's information",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "claimId": {
                        "type": "string",
                        "description": "Id of claim",
                        "example": "id123"
                      },
                      "status": {
                        "type": "string",
                        "description": "Claim status",
                        "enum": [
                          "PENDING", "ACTIVE", "REVIEWING", "REJECT", "PENDING_REVOKE", "REVOKED"
                        ]
                      },
                      "holderId": {
                        "type": "string",
                        "description": "DID of Holder who owns this claim",
                        "example": "1234"
                      },
                      "issuerId": {
                        "type": "string",
                        "description": "DID of Issuer who issues this claim",
                        "example": "1234"
                      },
                      "schemaHash": {
                        "type": "string",
                        "description": "SchemaHash of Claim",
                        "example": "1234"
                      },
                      "createAt": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Time stamp when claim actived",
                        "example": "1681355391"
                      },
                      "revNonce": {
                        "type": "integer",
                        "format": "int64",
                        "description": "Revocation Nonce of Claim",
                        "example": 10
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims/{claimId}/retrieve": {
      "get": {
        "operationId": "claims-2",
        "security": [],
        "tags": [
          "claims"
        ],
        "summary": "Retrieve claims data from claimId",
        "description": "Entry and Raw data of claim that Issuer isse for holder",
        "parameters": [
          {
            "name": "claimId",
            "in": "path",
            "description": "claimId",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims/publish/{issuerId}": {
      "put": {
        "operationId": "claims-302",
        "security": [],
        "tags": [
          "claims"
        ],
        "summary": "publish claim",
        "description": "publish claim",
        "parameters": [
          {
            "name": "issuerId",
            "in": "path",
            "description": "issuer id",
            "schema": { 
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims/request/{issuerId}": {
      "post": {
        "operationId": "claims-3",
        "security": [],
        "tags": [
          "claims"
        ],
        "summary": "Request create claim",
        "description": "Holder request Issuer issue a Claim",
        "parameters": [
          {
            "name": "issuerId",
            "in": "path",
            "description": "DID of issuer",
            "schema": {
              "type": "string",
              "example": "1234"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Holder's data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestClaim"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Response create Claim",
                  "type": "object",
                  "properties": {
                    "claimId": {
                      "type": "string",
                      "description": "Id of claim",
                      "example": "id1234"
                    },
                    "encodeClaim": {
                      "type": "string",
                      "format": "hex",
                      "description": "Claim data encoded by PublicKey of Holder",
                      "example": "123123"
                    },
                    "nonce": {
                      "type": "string",
                      "format": "hex",
                      "description": "*Nonce* number",
                      "example": "1232123"
                    },
                    "serverPublicKey": {
                      "type": "string",
                      "format": "hex",
                      "description": "PublicKey of server",
                      "example": "1232123"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims/issue/{issuerId}": {
      "post": {
        "operationId": "claims-4",
        "security": [
        ],
        "tags": [
          "claims"
        ],
        "summary": "Issue list claim",
        "description": "Issuer issue array claims for holders",
        "parameters": [
          {
            "name": "issuerId",
            "in": "path",
            "description": "DID of issuer",
            "schema": {
              "type": "string"
            },
            "required": true,
            "example": "12324"
          }
        ],
        "requestBody": {
          "description": "Array data of holders",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IssueListClaims"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims/{claimId}/status": {
      "get": {
        "operationId": "claims-5",
        "security": [],
        "tags": [
          "claims"
        ],
        "summary": "Get claim status",
        "description": "Check status of a claim",
        "parameters": [
          {
            "name": "claimId",
            "in": "path",
            "description": "Id of claim",
            "schema": {
              "type": "string",
              "example": "id123"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Status of claim",
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "enum": [
                        "PENDING", "ACTIVE", "REVIEWING", "REJECT", "PENDING_REVOKE", "REVOKED"
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/claims/{claimId}/proof": {
      "get": {
        "operationId": "claims-6",
        "security": [],
        "tags": [
          "claims"
        ],
        "summary": "Query proof input",
        "description": "Query proof input for generate witness of claims",
        "parameters": [
          {
            "name": "claimId",
            "in": "path",
            "description": "id of claim",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "type in (mtp, nonRevMtp)",
            "required": true,
            "schema": {
              "type": "string",
              "default": "mtp",
              "enum": [
                "mtp",
                "nonRevMtp"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {

                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas": {
      "post": {
        "operationId": "schemas-1",
        "security": [],
        "tags": [
          "schemas"
        ],
        "summary": "Request Create Schema",
        "description": "Request create a schema. **ZIDEN** will review and accept if this schema is valid.",
        "requestBody": {
          "description": "Your schema",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "schemas-2",
        "security": [],
        "tags": [
          "schemas"
        ],
        "summary": "Get all schema",
        "description": "Find all schema",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Find all Schema",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/{schemaHash}": {
      "get": {
        "operationId": "schemas-3",
        "security": [],
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "schemaHash",
            "in": "path",
            "description": "find schema by schemaHash",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12345"
            }
          }
        ],
        "summary": "Find schema",
        "description": "Find schema by schemaHash",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Schema find by schemaHash",
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schemas/primative/{schemaHash}": {
      "get": {
        "operationId": "schemas-4",
        "security": [],
        "tags": [
          "schemas"
        ],
        "parameters": [
          {
            "name": "schemaHash",
            "in": "path",
            "description": "schemaHash",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get Input Form Schema",
        "description": "API Get input form schema by SchemaHash. Type of fieldData will be Standard Type.",
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "@id": {
                      "type": "string",
                      "description": "id of schema"
                    },
                    "@hash": {
                      "type": "string",
                      "description": "schema hash"
                    },
                    "@name": {
                      "type": "string",
                      "description": "Schema name"
                    },
                    "@type": {
                      "type": "string",
                      "description": "Schema type",
                      "enum": [
                        "schema",
                        "context"
                      ],
                      "default": "schema"
                    },
                    "@required": {
                      "type": "array",
                      "description": "Attribute required in schema",
                      "items": {
                        "type": "string"
                      }
                    },
                    "fieldName": {
                      "type": "object",
                      "properties": {
                        "@id": {
                          "type": "string",
                          "description": "Slot in claim to save this data",
                          "enum": [
                            "std-pos:idx-1", "std-pos:idx-2", "std-pos:idx-1", "std-pos:val-1", "std-pos:val-2"
                          ]
                        },
                        "@type": {
                          "type": "string",
                          "description": "Standard data type",
                          "enum": [
                            "std:str", "std:int32", "std:double", "std:obj", "std:bool", "std:date"
                          ]
                        }
                      }
                    }
                  },
                  "example": {
                    "@id": "basic-course",
                    "@hash": "123456",
                    "@name": "Basic course certificate",
                    "@type": "schema",
                    "certificate-id": {
                      "@id": "std-pos:idx-1",
                      "@type": "std:str"
                    },
                    "name": {
                      "@id": "std-pos:val-1",
                      "@type": "std:str"
                    },
                    "result": {
                      "@id": "std-pos:val-1",
                      "@type": "std:str"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/registries": {
      "post": {
        "operationId": "registries-1",
        "security": [],
        "tags": [
          "registries"
        ],
        "summary": "Create new Registry",
        "description": "Create new registry services for issuer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registry"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceRegistryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "registries-2",
        "security": [],
        "tags": [
          "registries"
        ],
        "summary": "Find Registry Service",
        "description": "Find Registry Service by SchemaHash, IssuerId or NetworkId",
        "parameters": [
          {
            "name": "schemaHash",
            "in": "query",
            "description": "hash of schema",
            "schema": {
              "type": "string",
              "example": "123456789"
            }
          },
          {
            "name": "issuerId",
            "in": "query",
            "description": "DID of Issuer",
            "schema": {
              "type": "string",
              "example": "1234"
            }
          },
          {
            "name": "networkId",
            "in": "query",
            "description": "Id of network",
            "schema": {
              "type": "integer",
              "example": 97
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array registry",
                  "items": {
                    "$ref": "#/components/schemas/QueryRegistryResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/registries/{registryId}": {
      "get": {
        "operationId": "registries-2",
        "security": [],
        "tags": [
          "registries"
        ],
        "summary": "Find Registry Service",
        "description": "Find Registry Service by SchemaHash, IssuerId or NetworkId",
        "parameters": [
          {
            "name": "registryId",
            "in": "path",
            "description": "id of registry",
            "schema": {
              "type": "string",
              "example": "123456789"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRegistryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/registries/{registryId}/activate": {
      "put": {
        "operationId": "registries-4",
        "security": [],
        "tags": [
          "registries"
        ],
        "summary": "Active/Deactive registry",
        "description": "Change status of registry",
        "parameters": [
          {
            "name": "registryId",
            "in": "path",
            "description": "Id of registry service",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1234"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "isActive": {
                    "type": "boolean",
                    "description": "Status of Registry Service",
                    "example": true
                  }
                },
                "required": ["isActive"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registry"
                }
              }
            }
          },
          "400": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIResponse": {
        "type": "object",
        "properties": {
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "type error",
            "example": "Invalid request"
          },
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Invalid request"
          }
        }
      },
      "Login": {
        "type": "object",
        "properties": {
          "proof": {
            "type": "object",
            "description": "Your proof"
          },
          "public_signals": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Your Public Signals"
            }
          },
          "circuitId": {
            "type": "string",
            "description": "CircuitId"
          },
          "schema": {
            "type": "string",
            "description": "Schema Hash of Authen (123456)"
          },
          "algorithm": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          }
        },
        "required": ["proof", "public_signals", "circuitId", "schema", "algorithm", "payload"]
      },
      "VerifyToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Your JWZ token",
            "example": "token123"
          }
        },
        "required": ["token"]
      },
      "Holder": {
        "type": "object",
        "properties": {
          "pubkeyX": {
            "type": "string",
            "description": "Your PublicKeyX",
            "example": "1234"
          },
          "pubkeyY": {
            "type": "string",
            "description": "Your PublicKeyY",
            "example": "1234"
          }
        },
        "required": ["pubkeyX", "pubkeyY"]
      },
      "Operator": {
        "description": "Information of operator",
        "type": "object",
        "properties": {
          "operatorId": {
            "type": "string",
            "description": "DID of Operator",
            "example": "1234"
          }
        },
        "required": ["operatorId"]
      },
      "Signature": {
        "type": "object", 
        "properties": {
          "signature": {
            "description": "Your signature",
            "type": "object",
            "properties": {
              "challenge": {
                "type": "string",
                "format": "BigNum",
                "example": "2400161577681291238529280264703639496358080169515952608708589558013231430525"
              },
              "challengeSignatureR8x": {
                "type": "string",
                "format": "BigNum",
                "example": "11890003505821740942342827466490219951374204720747371650777335503316016714756"
              },
              "challengeSignatureR8y": {
                "type": "string",
                "format": "BigNum",
                "example": "4572047267382586032939239839765622365092726649604288788632301595003251991693"
              },
              "challengeSignatureS": {
                "type": "string",
                "format": "BigNum",
                "example": "2655604807051308811171436613928479239441325277756998151249502848413329977634"
              }
            },
            "required": ["challenge", "challengeSignatureR8x", "challengeSignatureR8y", "challengeSignatureS"]
          }
        },
        "required": ["signature"]
      },
      "Network": {
        "type": "object",
        "properties": {
          "networkId": {
            "type": "integer",
            "description": "Id of network supported",
            "example": 97
          },
          "name": {
            "type": "string",
            "description": "Name of Network",
            "example": "Binance Smart Chain Testnet"
          },
          "shotName": {
            "type": "string",
            "description": "Shot name of Network",
            "example": "bnbt"
          }
        },
        "required": ["networkId", "name", "shotName"]
      },
      "NetworkResponse": {
        "type": "object",
        "properties": {
          "networdId": {
            "type": "integer",
            "description": "Id of network supported",
            "example": 97
          },
          "name": {
            "type": "string",
            "description": "Name of Network",
            "example": "Binance Smart Chain Testnet"
          },
          "shotName": {
            "type": "string",
            "description": "Shot name of Network",
            "example": "bnbt"
          },
          "createAt": {
            "type": "integer",
            "format": "int64",
            "description": "Time stamp Create network",
            "example": "1681355391"
          },
          "updateAt": {
            "type": "integer",
            "format": "int64",
            "description": "Time stamp Update network",
            "example": "1681355391"
          }
        }
      },
      "Schema": {
        "type": "object",
        "properties": {
          "@name": {
            "type": "string",
            "description": "Schema name"
          },
          "@type": {
            "type": "string",
            "description": "Schema type",
            "enum": [
              "schema",
              "context"
            ],
            "default": "schema"
          },
          "@context": {
            "type": "array",
            "description": "List context url use in this schema",
            "items": {
              "type": "string",
              "format": "url",
              "description": "Link context"
            },
            "example": ["https://raw.githubusercontent.com/ziden-dev/schema-models/main/json/contexts/ziden-general-context.json"]          
          },
          "@required": {
            "type": "array",
            "description": "Attribute required in schema",
            "items": {
              "type": "string"
            }
          },
          "fieldName": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "description": "Slot in claim to save this data",
                "enum": [
                  "std-pos:idx-1", "std-pos:idx-2", "std-pos:idx-1", "std-pos:val-1", "std-pos:val-2"
                ],
                "example": "std-pos:idx-1"
              },
              "@type": {
                "type": "string",
                "description": "Type of data."
              }
            },
            "required": ["@id", "@type"]
          }
        },
        "required": ["@name", "@type", "@context", "@required"],
        "example": {
          "@name": "Basic course certificate",
          "@type": "schema",
          "@context": [],
          "certificate-id": {
            "@id": "std-pos:idx-1",
		        "@type": "std:str"
          },
          "name": {
            "@id": "std-pos:val-1",
            "@type": "std:str"
          },
          "result": {
            "@id": "std-pos:val-1",
            "@type": "std:str"
          }
        }
      },
      "RevokeList": {
        "type": "object",
        "properties": {
          "revNonces": {
            "type": "array",
            "description": "List claim revNonce",
            "items": {
              "type": "integer",
              "description": "revNonce of claim",
              "example": 2
            }
          }
        },
        "required": ["revNonces"]
      },
      "Registry": {
        "type": "object",
        "properties": {
          "schemaHash": {
            "type": "string",
            "example": "schemaHash",
            "description": "Hash of schema in registry"
          },
          "issuerId": {
            "type": "string",
            "example": "issuerId",
            "description": "DID of Issuer"
          },
          "description": {
            "type": "string",
            "example": "description",
            "description": "Description about this Registry"
          },
          "expiration": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "description": "Expiration data of claims created by this registry"
          },
          "updatetable": {
            "type": "boolean",
            "example": false,
            "description": "Updatetable of claim"
          },
          "networkId": {
            "type": "integer",
            "example": 97,
            "description": "Support network"
          },
          "endpointUrl": {
            "type": "string",
            "example": "endpointUrl",
            "description": "url of issuer service registry"
          }
        },
        "required": ["schemaHash", "issuerId", "description", "networkId", "endpointUrl"]
      },
      "RequestClaim": {
        "description": "Body for request new Claim",
        "type": "object",
        "properties": {
          "holderId": {
            "type": "string",
            "description": "DID of Holder who request new claim",
            "example": "1234"
          },
          "registryId": {
            "type": "string",
            "description": "Id of registry what holder want to create claim",
            "example": "id123"
          },
          "publicKey": {
            "type": "string",
            "description": "Data response will be encoded by publicKey",
            "example": "1234"
          },
          "data": {
            "description": "Holder's data to create claim",
            "type": "object",
            "example": {
              "name": "name",
              "age": 20
            }
          }
        },
        "required": ["holderId", "registryId", "publicKey", "data"]
      },
      "IssueListClaims": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "holderId": {
              "type": "string",
              "description": "DID of Holder who request new claim",
              "example": "1234"
            },
            "registryId": {
              "type": "string",
              "description": "Id of registry what holder want to create claim",
              "example": "id123"
            },
            "data": {
              "description": "Holder's data to create claim",
              "type": "object",
              "example": {
                "name": "name",
                "age": 20
              }
            }
          },
          "required": ["holderId", "registryId", "data"]
        }
      },
      "Challenge": {
        "type": "object",
        "properties": {
          "challenge": {
            "type": "string",
            "format": "BigNum",
            "description": "Challenge to sign message",
            "example": "123456"
          }
        }
      },
      "SchemaResponse": {
        "type": "object",
        "properties": {
          "@id": {
            "type": "string",
            "description": "id of schema"
          },
          "@hash": {
            "type": "string",
            "description": "schema hash"
          },
          "@name": {
            "type": "string",
            "description": "Schema name"
          },
          "@type": {
            "type": "string",
            "description": "Schema type",
            "enum": [
              "schema",
              "context"
            ],
            "default": "schema"
          },
          "@context": {
            "type": "array",
            "description": "List context url use in this schema",
            "items": {
              "type": "string",
              "format": "url",
              "description": "Link context"
            },
            "example": ["https://raw.githubusercontent.com/ziden-dev/schema-models/main/json/contexts/ziden-general-context.json"]          
          },
          "@required": {
            "type": "array",
            "description": "Attribute required in schema",
            "items": {
              "type": "string"
            }
          },
          "fieldName": {
            "type": "object",
            "properties": {
              "@id": {
                "type": "string",
                "description": "Slot in claim to save this data",
                "enum": [
                  "std-pos:idx-1", "std-pos:idx-2", "std-pos:idx-1", "std-pos:val-1", "std-pos:val-2"
                ],
                "example": "std-pos:idx-1"
              },
              "@type": {
                "type": "string",
                "description": "Type of data."
              }
            }
          }
        },
        "example": {
          "@id": "basic-course",
          "@hash": "123456",
          "@name": "Basic course certificate",
          "@type": "schema",
          "@context": [],
          "certificate-id": {
            "@id": "std-pos:idx-1",
            "@type": "std:str"
          },
          "name": {
            "@id": "std-pos:val-1",
            "@type": "std:str"
          },
          "result": {
            "@id": "std-pos:val-1",
            "@type": "std:str"
          }
        }
      },
      "ServiceRegistryResponse": {
        "description": "Registry Response",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of registry",
            "example": "id1234"
          },
          "schema": {
            "type": "object",
            "description": "Schema information",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of schema",
                "example": "schemaName"
              },
              "hash": {
                "type": "string",
                "description": "hash of schema",
                "example": "123456789"
              }
            }
          },
          "issuerId": {
            "type": "string",
            "description": "DID of Issuer",
            "example": "1234"
          },
          "description": {
            "type": "string",
            "description": "Description about this Registry",
            "example": "description"
          },
          "expiration": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "description": "Expiration data of claims created by this registry"
          },
          "updatetable": {
            "type": "boolean",
            "example": false,
            "description": "Updatetable of claim"
          },
          "endpointUrl": {
            "type": "string",
            "example": "endpointUrl",
            "description": "url of issuer service registry"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Status of Registry Service"
          },
          "network": {
            "type": "object",
            "description": "network information",
            "properties": {
              "networdId": {
                "type": "integer",
                "description": "Id of network",
                "example": 97
              },
              "name": {
                "type": "string",
                "description": "Name of network",
                "example": "bnb testnet"
              }
            }
          }
        }
      },
      "QueryRegistryResponse": {
        "description": "Registry Response",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of registry",
            "example": "id1234"
          },
          "schema": {
            "type": "object",
            "description": "Schema information",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of schema",
                "example": "schemaName"
              },
              "hash": {
                "type": "string",
                "description": "hash of schema",
                "example": "123456789"
              }
            }
          },
          "issuerId": {
            "type": "string",
            "description": "DID of Issuer",
            "example": "1234"
          },
          "description": {
            "type": "string",
            "description": "Description about this Registry",
            "example": "description"
          },
          "expiration": {
            "type": "integer",
            "format": "int64",
            "example": 0,
            "description": "Expiration data of claims created by this registry"
          },
          "updatetable": {
            "type": "boolean",
            "example": false,
            "description": "Updatetable of claim"
          },
          "endpointUrl": {
            "type": "string",
            "example": "endpointUrl",
            "description": "url of issuer service registry"
          },
          "isActive": {
            "type": "boolean",
            "example": true,
            "description": "Status of Registry Service"
          },
          "network": {
            "type": "object",
            "description": "network information",
            "properties": {
              "networdId": {
                "type": "integer",
                "description": "Id of network",
                "example": 97
              },
              "name": {
                "type": "string",
                "description": "Name of network",
                "example": "bnb testnet"
              }
            }
          },
          "numClaims": {
            "type": "integer",
            "description": "Number claims are created by this registry",
            "example": 100
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey",
        "description": "Your JWZ Token"
      }
    }
  }
}